module Test.Data.Wavelet where

import Signal.Wavelet.List.Common


all2 :: (a -> b) -> (a, a) -> (b, b) 
all2 f (a, b) = (f a, f b)


all3 :: (a -> b) -> (a, a, a) -> (b, b, b) 
all3 f (a, b, c) = (f a, f b, f c)


dataDwt :: [([Double], [Double], [Double])] 
dataDwt =
    [   -- [30,25,40]
      ( [  0.5235987755982988,  0.436332312998582,  0.698131700797731]
      , [1,2,2,4,-3,5,0,1,1,-1,-2,2,4,5,6,3] 
      , [ -4.4520662844565800, -0.766339042879150, -3.990239276792010,  
           3.2735751058710300, -2.639689358691720, -1.392299200715840,
           0.0624400001370536, -1.159888007129840,  0.979063355853563,  
           0.7634941595614190, -4.563606712907260, -4.766738951689430, 
          -4.6622579814906800, -5.417080918602780, -0.869330716850108, 
          -1.3307460249419300 ] 
      ),
      ( [] 
      , [1,2,2,4,-3,5,0,1,1,-1,-2,2,4,5,6,3]
      , [1,2,2,4,-3,5,0,1,1,-1,-2,2,4,5,6,3] 
      ),
      ( []
      , []
      , []
      ),
      ( [1,2,3]
      , []
      , []
      )
    ]


dataIdwt :: [([Double], [Double], [Double])] 
dataIdwt =
    [   -- [40,25,30]
      ( [  0.6981317007977318,  0.436332312998582,  0.523598775598298 ]
      , [ -4.4520662844565800, -0.766339042879150, -3.990239276792010,  
           3.2735751058710300, -2.639689358691720, -1.392299200715840,
           0.0624400001370536, -1.159888007129840,  0.979063355853563,  
           0.7634941595614190, -4.563606712907260, -4.766738951689430, 
          -4.6622579814906800, -5.417080918602780, -0.869330716850108, 
          -1.3307460249419300 ]
      , [1,2,2,4,-3,5,0,1,1,-1,-2,2,4,5,6,3] 
      ),
      ( []
      , [1,2,2,4,-3,5,0,1,1,-1,-2,2,4,5,6,3]
      , [1,2,2,4,-3,5,0,1,1,-1,-2,2,4,5,6,3] 
      ),
      ( []
      , []
      , []
      ),
      ( [1,2,3]
      , []
      , []
      )
    ]


dataLattice :: [((Double, Double), [Double], [Double])]
dataLattice =
    [
      ((  0.5, 0.8660254038 ), 
       [  1, 2, 2, 4,-3, 5, 0, 1, 1,-1,-2, 2, 4, 5, 6, 3 ],
       [  1.8660254038, -1.2320508076,  3.7320508076, -2.4641016151,
         -0.0980762114, -5.8301270189,  0.5000000000, -0.8660254038,
          0.3660254038,  1.3660254038, -0.7320508076, -2.7320508076,
          5.9641016151, -2.3301270189,  6.6961524227,  0.4019237886 ]
      ), 
      ((  0.4226182617, 0.9063077870 ),
       [ -1.2320508076,  3.7320508076, -2.4641016151, -0.0980762114, 
         -5.8301270189,  0.5000000000, -0.8660254038,  0.3660254038,
          1.3660254038, -0.7320508076, -2.7320508076,  5.9641016151,
         -2.3301270189,  6.6961524227,  0.4019237886,  1.8660254038 ],
       [  0.4606155841, -3.9030738792, -2.2746832798, -0.9524871073, 
         -5.0725803858, -2.9170720400, -0.6301965473, -0.6977298245,
          0.9286614209,  1.2407706290,  0.0444593360, -6.5599262998,
          0.7181040352, -7.0535293143,  1.1528830720, -1.5213330213 ]
      ),
      (( 0.5, 0.8660254038 ), 
       [], 
       []
      )
    ]


dataLatticeWithLM :: [(Int, (Double, Double), [Double], [Double])]
dataLatticeWithLM = zipWith f [0, 1, 0] dataLattice
    where f n (a, b, c) = (n, a, cslN n b, cslN n c)


dataExtendFront :: [(Int, [Double], [Double])]
dataExtendFront =
   [
     ( 3
     , [1,2,2,4,-3,5,0,1,1,-1,-2,2]
     , [1,-1,-2,2,1,2,2,4,-3,5,0,1,1,-1,-2,2]
     ),
     ( 6
     , [1,2,3,4]
     , [3,4,1,2,3,4,1,2,3,4,1,2,3,4]
     ),
     ( 3
     , [1,2]
     , [1,2,1,2,1,2]
     ),
     ( 1
     , [1,2]
     , [1,2]
     ),
     ( 7
     , []
     , []
     )
   ]


dataExtendEnd :: [(Int, [Double], [Double])]
dataExtendEnd =
   [
     ( 3
     , [1,2,2,4,-3,5,0,1,1,-1,-2,2]
     , [1,2,2,4,-3,5,0,1,1,-1,-2,2,1,2,2,4]
     ),
     ( 3
     , [1,2]
     , [1,2,1,2,1,2]
     ),
     ( 1
     , [1,2]
     , [1,2]
     ),
     ( 7
     , []
     , []
     )
   ]


dataCsl :: [([Double], [Double])]
dataCsl = 
    [
      ( [1,2,3,4], [2,3,4,1] )
    , ( [], [] )
    ]


dataCsr :: [([Double], [Double])]
dataCsr = 
    [
      ( [1,2,3,4], [4,1,2,3] )
    , ( [], [] )
    ]


dataCslN :: [(Int, [Double], [Double])]
dataCslN = 
    [
      (  0, [1,2,3,4], [1,2,3,4] )
    , (  1, [1,2,3,4], [2,3,4,1] )
    , (  5, [1,2,3,4], [2,3,4,1] )
    , ( -3, [1,2,3,4], [2,3,4,1] )
    , (  4, [1,2,3,4], [1,2,3,4] )
    , (  4, [], [] )
    ]


dataCsrN :: [(Int, [Double], [Double])]
dataCsrN = 
    [
      (  0, [1,2,3,4], [1,2,3,4] )
    , (  1, [1,2,3,4], [4,1,2,3] )
    , (  5, [1,2,3,4], [4,1,2,3] )
    , ( -3, [1,2,3,4], [4,1,2,3] )
    , (  4, [1,2,3,4], [1,2,3,4] )
    , (  4, [], [] )
    ]


dataTrim :: [([Double], [Double])]
dataTrim =
   [
     ( [1,2,2,4,-3,5,0,1,1,-1,-2,2,4,5,6,3]
     , [  2,2,4,-3,5,0,1,1,-1,-2,2,4,5,6  ]
     ),
     ( [1,2]
     , []
     ),
     ( [1]
     , []
     ),
     ( []
     , []
     )
   ]

